df <- data.frame()
df$A<-1:10
df <- 1:10
df$A<-1:10
df$B<-1:10
df$C<-1:10
df
df <- data.frame()
df
df<-[10,3]
df
df <- data.frame(matrix(ncol = 3, nrow = 10))
names(df)<-c("A","B","C")
df$A<-1:10
df$B<-1:10
df$C<-1:10
df
df2 <- data.frame(matrix(ncol = 3, nrow = 10))
names(df2)<-c("C","E","F")
df2 <- data.frame(matrix(ncol = 3, nrow = 5))
names(df2)<-c("C","E","F")
df2$C<-1:5
df2$E<-1:5
df2$F<-1:5
df2
df2$C<-6:10
df2
merge(df,df2,by="C")
df2$C<-16:20
merge(df,df2,by="C")
merge(df,df2,by="C", all=TRUE)
df2$C<-10:15
df2$C<-10:14
merge(df,df2,by="C", all=TRUE)
df<-data(iris)
df[1:10,]
df
data(iris)
iris
df<-iris
df[1:10,]
df<-df[1:10,]
df$NEW<-'low'
df
df[df$Petal.Width > 0.1,]$NEW<-'med'
df
df<-data(iris)
df
df<-iris
df
formula=Species~.
library(ada)
load.packages(ada)
load.packages("ada")
install.pacakges("ada")
install.packages("ada")
library(ada)
model=ada(formula=formula,data=df)
model=naiveBayes(formula=formula,data=df)
install.packages("naiveBayes")
install.packages("e1071")
library(e1071)
model=naiveBayes(formula=formula,data=df)
model
p=predict(model,df)
p
model.s<-svm(formula,df)
p.s<-predict(model.s,df)
p.s
setwd("Desktop/Edifecs/Edifecs/")
lp-preds-ksvm30K<-readRDS("lp-preds-ksvm30K.rds")
lp.preds.ksvm30K<-readRDS("lp-preds-ksvm30K.rds")
lp.preds.ksvm30K
lp.truths.ksvm30K<-readRDS("lp-truths-ksvm30K.rds")
lp.truths.ksvm30K
lp.truths.ksvm30K.first<-lp.truths.ksvm30K
strsplit(lp.truths.ksvm30K.first,' ')
lp.truths.ksvm30K.first[]<-lapply(lp.truths.ksvm30K, as.character)
strsplit(lp.truths.ksvm30K.first,' ')
lp.truths.ksvm30K
lp.truth.ten<-lp.truths.ksvm30K
lp.truth.ten<-lp.truths.ksvm30K[1:10]
lp.truth.ten
lp.pred.ten<-lp.preds.ksvm30K[1:10]
lp.pred.ten
for(i in 1:10) {
if((lp.truth.ten[i]/3)==(lp.pred.ten[i]/3)) {
message(i,': yes')
}
}
for(i in 1:10) {
if((as.numeric(lp.truth.ten[i])/3)==(as.numeric(lp.pred.ten[i])/3)) {
message(i,': yes')
}
}
for(i in 1:10) {
if((as.numeric(lp.truth.ten[i])>6)==(as.numeric(lp.pred.ten[i])>6)) {
message(i,': yes')
}
}
for(i in 1:10) {
if((as.numeric(lp.truth.ten[i])>6)&&(as.numeric(lp.pred.ten[i])>6)) {
message(i,': yes')
}
}
for(i in 1:10) {
if((as.numeric(lp.truth.ten[i])>6)) {
message(i,': yes')
}
}
lp.truth.ten
for(i in 1:10) {}
for(i in 1:10) {
message(as.numeric(lp.truth.ten[i]))
}
for(i in 1:10) {
message(as.numeric(lp.truth.ten[i]),lp.truth.ten[i])
}
for(i in 1:10) {
message(as.numeric(lp.pred.ten[i]),lp.pred.ten[i])
}
for(i in 1:100) {
message(as.numeric(lp.preds.ksvm30K[i]),lp.preds.ksvm30K[i])
}
for(i in 1:100) {
message(as.numeric(lp.truths.ksvm30K[i]),lp.truths.ksvm30K[i])
}
averageAccuracy<-function(x.truth,x.pred) {
score<-0
for(i in 1:length(x.truth)) {}
}
averageAccuracy<-function(x.truth,x.pred) {
score<-0
for(i in 1:length(x.truth)) {
intersect.labels<-union.labels<-2
if(as.numeric(x.truth[i]) > 6 && as.numeric(x.pred[i]) > 6) {
intersect.labels<-intersect.labels-1
union.labels<-union.labels+1
} else if(as.numeric(x.truth[i]) > 3 && as.numeric)
}
1/3
2/3
3/3
9%3
9%%3
averageAccuracy <- function(x.truth, x.preds) {#
	score <- 0#
  	for(i in 1:length(x.truth)) {#
    		intersect.labels<-union.labels<-2#
    		if((as.numeric(x.truth[i])/3) <= 1 ) {#
			if((as.numeric(x.preds[i])/3) <= 1) {#
      				intersect.labels<-intersect.labels-1#
      				union.labels<-union.labels+1#
    		} else if((as.numeric(x.truth[i])/3) <= 2) {#
			if((as.numeric(x.preds[i])/3) <= 2 && (as.numeric(x.preds[i])/3) > 1) {#
      				intersect.labels<-intersect.labels-1#
      				union.labels<-union.labels+1#
			}#
     		} else { #
			if((as.numeric(x.preds[i])/3) > 2) {#
      				intersect.labels<-intersect.labels-1#
      				union.labels<-union.labels+1#
			}#
     		}#
    		if((as.numeric(x.truth[i])%%3) == 1 (as.numeric(x.preds[i])%%3)) {#
      			intersect.labels<-intersect.labels-1#
      			union.labels<-union.labels+1#
    		}#
    		score<-score+(intersect.labels/union.labels)#
  	}#
  	score/length(x.truth)#
}
}
averageAccuracy <- function(x.truth, x.preds) {#
	score <- 0#
  	for(i in 1:length(x.truth)) {#
    		intersect.labels<-union.labels<-2#
    		if((as.numeric(x.truth[i])/3) <= 1 ) {#
			if((as.numeric(x.preds[i])/3) <= 1) {#
      				intersect.labels<-intersect.labels-1#
      				union.labels<-union.labels+1#
			}#
    		} else if((as.numeric(x.truth[i])/3) <= 2) {#
			if((as.numeric(x.preds[i])/3) <= 2 && (as.numeric(x.preds[i])/3) > 1) {#
      				intersect.labels<-intersect.labels-1#
      				union.labels<-union.labels+1#
			}#
     		} else { #
			if((as.numeric(x.preds[i])/3) > 2) {#
      				intersect.labels<-intersect.labels-1#
      				union.labels<-union.labels+1#
			}#
     		}#
    		if((as.numeric(x.truth[i])%%3) == 1 (as.numeric(x.preds[i])%%3)) {#
      			intersect.labels<-intersect.labels-1#
      			union.labels<-union.labels+1#
    		}#
    		score<-score+(intersect.labels/union.labels)#
  	}#
  	score/length(x.truth)#
}
averageAccuracy(lp.truths.ksvm30K,lp.preds.ksvm30K)
averageAccuracy(lp.truths.ksvm30K,lp.preds.ksvm30K)
df<-readRDS("../data/kdd-30K-sample.rds")
df[1:100,]
uniquelength<-sapply(df,function(x) length(unique(x)))
df.unique<-subset(df,select=uniquelength>1)
colnames(df.unique)
colnames(df)
