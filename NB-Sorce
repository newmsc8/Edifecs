Naive Bayes:

# load library
library(e1071)

# load data
data <- read.csv(“withcount.csv”)

data


# blank cell count
# to make sure that no cell is empty

is.na.count <- matrix(0, ncol(data))

for (j in 1:ncol(data)) {
 for (i in 1:nrow(data)) {
  if (is.na(data[i, j])) {
   is.na.count[j, 1] <- is.na.count[j, 1] + 1
  }
 }
}

is.na.total <- 0

for (j in 1:ncol(data)) {
 if (is.na.count[j, 1] != 0) {
  is.na.total <- is.na.total + 1
 }
}

is.na.total == 0

# get rid of unnecessary columns



data$claimdate <- NULL
data$surgdate <- NULL
data$SoreCount1 <- NULL
data$ScoreCount2 <- NULL
data$ScoreCount3 <- NULL
data$ScoreCount6 <- NULL



# the above two steps will prepare "data.processed" from "data"
# for the time being "data.processed" is just "data"
data.processed <- data



# now get rid of ID
data.processed$ENROLID <- NULL


# as.factor for running naive bayes if necessary
for (j in 1:ncol(data.processed)) {
 data.processed[, j] <- as.factor(data.processed[, j])
}

# shuffle data
data.shuffled <- data.processed[sample(1:nrow(data.processed)), ]


# train data. for simplicity 2/3 for now.
data.train <- data.shuffled[which(1:nrow(data.shuffled) %% 3 != 0), ]

# test data. 1/3 for now.
data.test <- data.shuffled[which(1:nrow(data.shuffled) %% 3 == 0), ]

# naive bayes model


model <- naiveBayes(ae_ind ~ ., data=data.train)

# see the model
model

# predict
p <- predict(model, data.test)

# function to compute accuracy

#accuracy 
accuracy <- function(x.truth, x.pred) {
 if (length(x.truth) == 0) {
  return (0)
 } else if (length(x.pred) == 0) {
  return (0)
 } else if (length(x.truth) != length(x.pred)) {
  return (0)
 }

 score <- 0

 for(i in 1:length(x.truth)) {
  if(x.truth[i] == x.pred[i]) {
    score <- score + 1
  }
 }

 return (score / length(x.truth))
}

# truth
t <- data.test[, grep("ae_ind", colnames(data.test))]

# compute average accuracy
accuracy(t, p)


#Precission
myprecision <- function(truth, pred) {
    if (length(truth) != length(pred)) {
        return(0)
    }
    
    tp <- 0 # true positive
    fp <- 0 # false positive
    
    for (i in 1:length(truth)) {
        if ((truth[i] == 1) && (pred[i] == 1)) {
            # true and predicted as true
            tp <- tp + 1
        }
        
        if ((truth[i] == 0) && (pred[i] == 1)) {
            # false but predicted as true
            fp <- fp + 1
        }
    }
    
    if ((tp + fp) == 0) {
        return(0)
    } else {
        return(tp / (tp + fp))
    }
}

#Recall
myrecall <- function(truth, pred) {
    if (length(truth) != length(pred)) {
        return(0)
    }
    
    tp <- 0 # true positive
    fn <- 0 # false negative
    
    for (i in 1:length(truth)) {
        if ((truth[i] == 1) && (pred[i] == 1)) {
            # true and predicted as true
            tp <- tp + 1
        }
        
        if ((truth[i] == 1) && (pred[i] == 0)) {
            # true but predicted as false
            fn <- fn + 1
        }
    }
    
    if ((tp + fn) == 0) {
        return(0)
    } else {
        return(tp / (tp + fn))
    }
}



#F-measure
myfmeasure <- function(truth, pred) {
   precision <- myprecision(truth, pred)
   recall <- myrecall(truth, pred)

   if ((precision + recall) == 0) {
       return (0)
   } else {
       return ((2 * precision * recall) / (precision + recall))
   }
}

precision <- myprecision(t, p)
recall <- myrecall(t,p)
fmeasure <- myfmeasure(t,p)
library(AUC)
auc(roc(p, t))
